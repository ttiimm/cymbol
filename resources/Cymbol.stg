SourceFile(file, functionDeclarations, functionDefinitions) ::= <<
/**
 * Cymbol generated C
 * <file.name>
 */

#include \<stdio.h\>
#include \<stdlib.h\>
#include \<stddef.h\>
#include \<string.h\>

#include "gc.h"

<file.structs:struct(); separator="\n">

void _main();
<functionDeclarations>
String *_String_literals[<file.stringLiteralSize>];
Int *_Int_literals[<file.intLiteralSize>];

<file.vars: {var | <variableDeclaration(var, false)>}; separator="\n">
void _main() {
    int i;
    gc_init(256 * 1000);
    
    <file.stringLiterals:initStringLiterals()>
    for(i = 0; i \< <file.stringLiteralSize>; i++)
        ADD_ROOT(_String_literals[i]);

    <file.intLiterals:initIntLiterals()>
    for(i = 0; i \< <file.intLiteralSize>; i++)
        ADD_ROOT(_Int_literals[i]);
}

<functionDefinitions>
>>


variableDeclaration(var, inStruct) ::= <<
<if(inStruct)>struct <endif><var.typeName> *<var.name><if(var.expr)> = <var.expr><endif>;>>


struct(struct) ::= <<
<structDecl(struct)>

<structTypeDescription(struct)>

<structConstructor(struct)>
>>

structDecl(struct) ::= <<
typedef struct <struct.name> {
    <struct.nested:struct(); separator="\n">
    TypeDescriptor *type;
    byte *forward;
    <struct.vars: {var | <variableDeclaration(var, true)>}; separator="\n">
} <struct.name>;
>>

structTypeDescription(struct) ::= <<
int <struct.name>_field_offsets[<struct.numVars>] = {
    <struct.vars: {var | offsetof(<struct.name>, <var.name>)}; separator=",\n">
};

TypeDescriptor <struct.name>_type = {
    "<struct.name>",
    sizeof(<struct.name>),
    <struct.numVars>,
    <struct.name>_field_offsets
};
>>

structConstructor(struct) ::= <<
<struct.name> *new_<struct.name>() {
    return (<struct.name> *) alloc(&<struct.name>_type);
}
>>

initStringLiterals(lits) ::= <<
<lits: {lit |_String_literals[<lit.id>] = new_String(<lit.text>);}>

>>

initIntLiterals(lits) ::= <<
<lits: {lit |_Int_literals[<lit.id>] = new_Int(<lit.text>);}>

>>


FunctionDeclarations(funcs) ::= <<
<funcs: {f |<signature(f)>;
}>
>>


FunctionDefinitions(funcs) ::= <<

<funcs: {f | <signature(f)> <f.block:Block()>}>
>>


signature(func) ::= <<
<func.typeName> <func.returnPointer><func.name>(<func.args: {arg | <arg.typeName> *<arg.name>}; separator=", ">)>>


Block(block) ::= <<
{
    GC_SAVE_RP;
    <block.structs:struct()>
    <block.statements: {s |<s>}; separator="\n">
    GC_RESTORE_RP;
}

>>