/**
 * Cymbol generated C
 * <Test>
 */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>

#include "gc.h"

typedef struct Tree {
    TypeDescriptor *type;
    byte *forward;
    struct Tree *left;
    struct Tree *right;
    struct Int *payload;
} Tree;

int Tree_field_offsets[3] = {
    offsetof(Tree, left),
    offsetof(Tree, right),
    offsetof(Tree, payload)
};

TypeDescriptor Tree_type = {
    "Tree",
    sizeof(Tree),
    3,
    Tree_field_offsets
};

Tree *new_Tree() {
    return (Tree *) alloc(&Tree_type);
}

void _main();
Tree *insert(Tree *parent, Int *payload);
void print_inorder(Tree *tree);
void main();

String *_String_literals[4];
Int *_Int_literals[9];

void _main() {
    int i;
    gc_init(256 * 1000);

    _String_literals[0] = new_String("%d\n");
    _String_literals[1] = new_String("In Order Traversal\n");
    _String_literals[2] = new_String("\nGC\n");
    _String_literals[3] = new_String("In Order Traversal\n");

    for(i = 0; i < 4; i++)
        ADD_ROOT(_String_literals[i]);

    _Int_literals[0] = new_Int(50);
    _Int_literals[1] = new_Int(60);
    _Int_literals[2] = new_Int(70);
    _Int_literals[3] = new_Int(90);
    _Int_literals[4] = new_Int(80);
    _Int_literals[5] = new_Int(40);
    _Int_literals[6] = new_Int(30);
    _Int_literals[7] = new_Int(10);
    _Int_literals[8] = new_Int(20);

    for(i = 0; i < 9; i++)
        ADD_ROOT(_Int_literals[i]);
}

Tree *insert(Tree *parent, Int *payload) {
    GC_SAVE_RP;
    if(parent == NULL) {
        Tree *t = new_Tree();
        ADD_ROOT(t);
        t->payload = payload;
        GC_RESTORE_RP;
        return t;
    }
     else if(payload->value < parent->payload->value) {
        parent->left = insert(parent->left, payload);
    }
     else if(payload->value > parent->payload->value) {
        parent->right = insert(parent->right, payload);
    }

    GC_RESTORE_RP;
    return parent;
    GC_RESTORE_RP;
}

void print_inorder(Tree *tree) {
    GC_SAVE_RP;
    if(tree == NULL) {
        GC_RESTORE_RP;
        return;
    }
     else {
        print_inorder(tree->left);
        printf(_String_literals[0]->elements, tree->payload->value);
        print_inorder(tree->right);
    }

    GC_RESTORE_RP;
}

void main() {
    GC_SAVE_RP;
    _main();
    Tree *root = insert(NULL, _Int_literals[0]);
    ADD_ROOT(root);
    Tree *sixty = insert(root, _Int_literals[1]);
    ADD_ROOT(sixty);
    Tree *seventy = insert(root, _Int_literals[2]);
    ADD_ROOT(seventy);
    Tree *ninety = insert(root, _Int_literals[3]);
    ADD_ROOT(ninety);
    Tree *eighty = insert(root, _Int_literals[4]);
    ADD_ROOT(eighty);
    Tree *forty = insert(root, _Int_literals[5]);
    ADD_ROOT(forty);
    Tree *thirty = insert(root, _Int_literals[6]);
    ADD_ROOT(thirty);
    Tree *ten = insert(root, _Int_literals[7]);
    ADD_ROOT(ten);
    Tree *twenty = insert(root, _Int_literals[8]);
    ADD_ROOT(twenty);
    printf(_String_literals[1]->elements);
    print_inorder(root);
    printf(_String_literals[2]->elements);
    gc();
    printf(_String_literals[3]->elements);
    print_inorder(root);
    GC_RESTORE_RP;
}