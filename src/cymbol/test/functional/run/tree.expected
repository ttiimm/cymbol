/**
 * Cymbol generated C
 * <Test>
 */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>

#include "gc.h"

typedef struct Tree {
    TypeDescriptor *type;
    byte *forward;
    struct Tree *left;
    struct Tree *right;
    struct Int *payload;
} Tree;

int Tree_field_offsets[3] = {
    offsetof(Tree, left),
    offsetof(Tree, right),
    offsetof(Tree, payload)
};

TypeDescriptor Tree_type = {
    "Tree",
    sizeof(Tree),
    3,
    Tree_field_offsets
};

Tree *new_Tree() {
    return (Tree *) alloc(&Tree_type);
}

void _main();
void main();

String *_String_literals[1];
Int *_Int_literals[1];

void _main() {
    int i;
    gc_init(256 * 1000);

    _String_literals[0] = new_String("%d\n");
    for(i = 0; i < 1; i++)
        ADD_ROOT(_String_literals[i]);

    _Int_literals[0] = new_Int(50);
    for(i = 0; i < 1; i++)
        ADD_ROOT(_Int_literals[i]);
}

void main() {
    GC_SAVE_RP;
    _main();
    Tree *fifty = new_Tree();
    ADD_ROOT(fifty);
    fifty->payload = _Int_literals[0];
    printf(_String_literals[0]->elements, fifty->payload->value);
    GC_RESTORE_RP;
}