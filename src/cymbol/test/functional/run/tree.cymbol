
struct Tree {
  Tree left;
  Tree right;
  int payload;
}

Tree insert(Tree parent, int payload) {
    if(parent == null)  {
        Tree t = new Tree();
        t.payload = payload;
        return t;
    } else if(payload < parent.payload) {
        parent.left = insert(parent.left, payload);
    } else if(payload > parent.payload) {
        parent.right = insert(parent.right, payload);
    }
    
    return parent;
}

void print_inorder(Tree tree) {
    if(tree == null) {
        return;
    } else {
        print_inorder(tree.left);
        printf("%d\n", tree.payload);
        print_inorder(tree.right);
    }
}

void main() {
    Tree root    = insert(null, 50);
    Tree sixty   = insert(root, 60);
    Tree seventy = insert(root, 70);
    Tree ninety  = insert(root, 90);
    Tree eighty  = insert(root, 80);
    Tree forty   = insert(root, 40);
    Tree thirty  = insert(root, 30);
    Tree ten     = insert(root, 10);
    Tree twenty  = insert(root, 20);
    
    printf("In Order Traversal\n");
    print_inorder(root);
    
    printf("\nGC\n\n");
    gc();
    
    printf("In Order Traversal\n");
    print_inorder(root);
}
